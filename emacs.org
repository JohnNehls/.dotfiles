;#+TITLE: Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle .emacs.d/init.el
#+STARTUP: content
* Setup
** Use-package
Use-package is like a package manager.
Packages: Elpa is default, Melpa is community.
#+begin_src emacs-lisp
  ;; Initialize package sources
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			   ("org" . "https://orgmode.org/elpa/")
			   ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)

  (unless package-archive-contents
   (package-refresh-contents))

  ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
     (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t) ; no need for :ensure t for each package.

  (use-package command-log-mode)
#+end_src

#+RESULTS:

** Auto-tangle
This snippet adds a hook to =org-mode= buffers so that =efs/org-babel-tangle-config= gets executed each time such a buffer gets saved.  This function checks to see if the file being saved is the Emacs.org file you're looking at right now, and if so, automatically exports the configuration here to the associated output files.

#+begin_src emacs-lisp
  ;; Automatically tangle our Emacs.org config file when we save it
  (defun efs/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/.dotfiles/emacs.org"))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))
#+end_src

* General Emacs
** Global Configurations

#+begin_src emacs-lisp
  (setq inhibit-startup-message t)           ; inhibit startup message
  (tool-bar-mode -1)                         ; remove toolbar
  (scroll-bar-mode -1)                       ; remove side scrollbar
  (tooltip-mode -1)                          ; Disable tooltips
  (set-fringe-mode 10)                       ; Give some breathing room
  (global-visual-line-mode t)                ; removes coninuation arrow
  (add-hook 'text-mode-hook 'flyspell-mode)  ; enable spellcheck on text mode
  (setq make-backup-files nil)               ; stop creating backup~ files
  (setq auto-save-default nil)               ; stop creating #autosave# files
  ;(menu-bar-mode -1)                        ; Disable the menu bar


  ;; Open text files in Org-Mode
  (add-to-list 'auto-mode-alist '("\\.text\\'" . org-mode)) 
  (add-to-list 'auto-mode-alist '("\\.txt\\'" . org-mode))

  ;; Set up the visible bell
  (setq visible-bell t)

#+end_src

Use rainbow colored parenthesis to help match delimiters. 
#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

*** Line numbers 
#+begin_src emacs-lisp
  ;; ;Disable line numbers for some modes
  ;;  (dolist (mode '(org-mode-hook
  ;; 		 term-mode-hook
  ;; 		 shell-mode-hook
  ;; 		 eshell-mode-hook))
  ;;    (add-hook mode (lambda () (display-line-numbers-mode 0))))

  ;; (global-display-line-numbers-mode t)     ; Puts line numbers on ALL buffers
#+end_src

#+RESULTS:
** Theme
Doom and Greduan's themes seem to be better than built-in themes due to their wide support and definitions. They account for the different modes' nuances.
Favorites: gruvbox, gruvbox-hard, doom-tomorrow-night

#+begin_src emacs-lisp
  (use-package gruvbox-theme
      :init (load-theme 'gruvbox t))
#+end_src

#+RESULTS:

** Transparency
#+begin_src emacs-lisp
 (defun transparency (value)
   "Sets the transparency of the frame window. 0=transparent/100=opaque"
   (interactive "nTransparency Value 0 - 100 opaque:")
   (set-frame-parameter (selected-frame) 'alpha value))
(transparency 96)
#+end_src

** Helpful
Better version of help. 
#+begin_src emacs-lisp
(use-package helpful
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))
#+end_src

#+RESULTS:
: helpful-key

** Ivy, Ivy-Rich, and Counsel
Ivy displays vertical completions of input buffer.
#+begin_src emacs-lisp
    (use-package ivy
      :diminish
      :config
      (ivy-mode 1))
#+end_src
Ivy-rich provides information to display in input buffer to counsel.
#+begin_src emacs-lisp
  (use-package ivy-rich
    :init
    (ivy-rich-mode 1))
#+end_src
Along with ivy-rich, counsel displays info along with suggestions in input buffer.
#+begin_src emacs-lisp
  (use-package counsel
    :bind (("M-x" . counsel-M-x)
	   ("C-x b" . counsel-ibuffer)
	   ("C-x C-f" . counsel-find-file)
	   :map minibuffer-local-map
	   ;("C-r" . 'counsel-minibuffer-history)
	   ))
#+end_src

** Which-key
#+begin_src emacs-lisp
  (use-package which-key
    :init (which-key-mode)
    :diminish which-key-mode  ;remove name from minor mode list
    :config
    (setq which-key-idle-delay 1.0))
#+end_src

** Neotree
#+begin_src emacs-lisp
(use-package neotree)
#+end_src

** Keybindings
Make ESC quit prompts
#+begin_src emacs-lisp
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

Eventually create my own keybindings as shown: https://www.youtube.com/watch?v=xaZMwNELaJY

* IDE
Configured as shown in the following video: [[https://www.youtube.com/watch?v=INTu30BHZGk][Projectile and Magit]].
** Magit
Git interface. Custom variable displays Magit status buffer in the same buffer rather than splitting it. 
#+begin_src emacs-lisp
(use-package magit
  :custom
  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
#+end_src

** Projectile
Projectile allows me to set project-wide commands and variables.
Notably: run, debug, project-variables, grep (and rg).
#+begin_src emacs-lisp
(use-package projectile
  :diminish projectile-mode
  :config (projectile-mode)
  :custom ((projectile-completion-system 'ivy))
  :bind-keymap
  ("C-c p" . projectile-command-map)
  :init
  ;; NOTE: Set this to the folder where you keep your Git repos!
  (when (file-directory-p "~/Projects/Code")
    (setq projectile-project-search-path '("~/Projects/Code")))
  (setq projectile-switch-project-action #'projectile-dired))

(use-package counsel-projectile
  :config (counsel-projectile-mode))
#+end_src

#+RESULTS:
: t

* C++
Wants:
- lsp-mode with clangd 
- company (with company-fix for fuzzy filtering completion)
- eldoc-box -documentation popup under curser for supported modes
- Yassnippet
- Projectile (but this might be more than just for c++)

  ;;;; c/cpp IDE packages
      lsp-mode           ; Language server protocol for interpreting languages 
      yasnippet          ; Code templates
      lsp-treemacs       ; Tree renderer-- have not explored yet
      ;helm-lsp           ; Helm is for incremental completion/selection
      projectile         ; Project interaction library
      hydra    ; ties related commands into short bindings with a common prefix
      flycheck ; On-the-fly syntax checking, replacemnt for flymake
      company  ; Text completion
      avy      ; Jumping to visible text using a char-based decision tree
      which-key ; Displays key bindings following entered incomplete command
      ;helm-xref ; Helm interface for xref
      dap-mode  ; Debug Adapter Protocol is a wire protocol for communication between client and Debug Server
  
* Python
** Elpy
#+begin_src emacs-lisp
  (use-package elpy
    :init (elpy-enable) ;enables Elpy in all future python buffers
    :custom
    (python-shell-interpreter "ipython")
    (python-shell-interpreter-args "-i --simple-prompt")
    (elpy-rpc-python-command "python3")
    (elpy-shell-echo-output nil)
    ;(elpy-rpc-backend "jedi")
    ;; Not sure if the following should really be here
    (python-shell-completion-native-enable nil)
    (python-indent-offset 4)
    (python-indent 4)
    )
#+end_src

* Org-Mode
** Mode setup
#+begin_src emacs-lisp 
  (defun efs/org-mode-setup ()
        (org-indent-mode)
        (variable-pitch-mode 1)
        (visual-line-mode 1))
#+end_src

** Fonts 
#+begin_src emacs-lisp
  (defun efs/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                       '(("^ *\\([-]\\) "
                        (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))

    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))
#+end_src

** Ellipsis
#+begin_src emacs-lisp
    (use-package org
        :hook (org-mode . efs/org-mode-setup)
        :config
        (setq org-ellipsis " ▾")
        (efs/org-font-setup))
#+end_src

** Bullets
#+begin_src emacs-lisp 
  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src

** Center column
#+begin_src emacs-lisp 
(defun efs/org-mode-visual-fill ()
  (setq visual-fill-column-width 100
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
  :hook (org-mode . efs/org-mode-visual-fill))

#+end_src

** Block Templates
#+begin_src emacs-lisp  
  ;; This is needed as of Org 9.2
  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("sh" . "src sh"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))

#+end_src

** Fixes
#+begin_src emacs-lisp  
   ;; setting to allow sizing of JPG and PNGs in org-mode
   (setq org-image-actual-width nil)
#+end_src

#+RESULTS:


* Localwords
#  LocalWords:  IDE solarized gruvbox vertico Magit Quickhelp Elpy Elisp Neotree Greduan's Localwords

