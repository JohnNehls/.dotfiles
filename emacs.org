;#+TITLE: Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle .emacs.d/init.el


* Old install of packages
Replace each item with use-package.
#+begin_src emacs-lisp  :tangle no

  ;; adds the Melpa archive to the list of package repositories and then gives permission to Emacs to use these packages.
  (require 'package)
  (add-to-list 'package-archives
	     '("melpa" . "http://melpa.org/packages/") t)
  (package-initialize)
  (package-refresh-contents)
#+end_src

#+RESULTS:

#+begin_src emacs-lisp
  ;; Install some packages
  (defvar myPackages
    '(better-defaults ; better theme
      zeno-theme
      neotree ; sidebar directory tree plugin
      magit ; Git porcelain
      ;;;; pythonIDE packages
      elpy ; wraps jedi, flymake, yasnippit all in one package
      company-quickhelp ; used to provide helpbox with auto-complete suggestion's help
      ;;;; c/cpp IDE packages
      lsp-mode           ; Language server protocol for interpreting languages 
      yasnippet          ; Code templates
      lsp-treemacs       ; Tree renderer-- have not explored yet
      helm-lsp           ; Helm is for incremental completion/selection
      projectile         ; Project interaction library
      hydra    ; ties related commands into short bindings with a common prefix
      flycheck ; On-the-fly syntax checking, replacemnt for flymake
      company  ; Text completion
      avy      ; Jumping to visible text using a char-based decision tree
      which-key ; Displays key bindings following entered incomplete command
      helm-xref ; Helm interface for xref
      dap-mode  ; Debug Adapter Protocol is a wire protocol for communication between client and Debug Server
      )
    )
  (mapc #'(lambda (package)
	    (unless (package-installed-p package)
	      (package-install package)))
	myPackages)

#+end_src


* Looks
Set overall theme.
#+begin_src emacs-lisp
  (load-theme 'solarized-gruvbox-dark t)
#+end_src

Darken the background of the source blocks by 3%.
This box is only really needed for certain themes which do not delineate between source and org text. As of now: solarized-gruvbox-dark
However, if you change your theme during editing the color of the code block will stay the same.
#+begin_src emacs-lisp
(require 'color)
(set-face-attribute 'org-block nil :background
                    (color-darken-name
                     (face-attribute 'default :background) 3))
#+end_src

#+RESULTS:

* General Emacs

** Global Configurations
#+begin_src emacs-lisp
(setq inhibit-startup-message t)          ; inhibit startup message
(tool-bar-mode -1)                        ; remove toolbar
(scroll-bar-mode -1)                      ; remove side scrollbar
;(global-display-line-numbers-mode t) ; show line numbers (better)
(global-visual-line-mode t)       ; removes coninuation arrow
(setq make-backup-files nil)      ; stop creating backup~ files
(setq auto-save-default nil)      ; stop creating #autosave# files
(add-to-list 'auto-mode-alist '("\\.text\\'" . org-mode)) ; open texts in org-mode
(add-to-list 'auto-mode-alist '("\\.txt\\'" . org-mode))
#+end_src

** Transparency
#+begin_src emacs-lisp
 (defun transparency (value)
   "Sets the transparency of the frame window. 0=transparent/100=opaque"
   (interactive "nTransparency Value 0 - 100 opaque:")
   (set-frame-parameter (selected-frame) 'alpha value))
(transparency 96)
#+end_src

** Text mode
#+begin_src emacs-lisp
(add-hook 'text-mode-hook 'flyspell-mode)    ; enable spellcheck on text mode
#+end_src


* C++
General idea from [[https://emacs-lsp.github.io/lsp-mode/tutorials/CPP-guide/][here]].

#+begin_src emacs-lisp
(which-key-mode)
(add-hook 'c-mode-hook 'lsp)
(add-hook 'c++-mode-hook 'lsp)

(setq gc-cons-threshold (* 100 1024 1024)
      read-process-output-max (* 1024 1024)
      treemacs-space-between-root-nodes nil
      company-idle-delay 0.0
      company-minimum-prefix-length 1
      lsp-idle-delay 0.1)  ;; clangd is fast

(with-eval-after-load 'lsp-mode
  (add-hook 'lsp-mode-hook #'lsp-enable-which-key-integration)
  (require 'dap-cpptools)
  (yas-global-mode))

#+end_src
** Helm
Inspired from sample `helm' configuration at https://github.com/emacs-helm/helm/
#+begin_src emacs-lisp
  (helm-mode)
  (require 'helm-xref)
  (define-key global-map [remap find-file] #'helm-find-files)
  (define-key global-map [remap execute-extended-command] #'helm-M-x)
  (define-key global-map [remap switch-to-buffer] #'helm-mini)
#+end_src


* Python

#+begin_src emacs-lisp
;; the following lines enable the elpy package as well as the ipython shell
(elpy-enable)
(setq python-shell-interpreter "ipython" ;require install ipython
      python-shell-interpreter-args "-i --simple-prompt")
(add-hook 'python-mode-hook 'eldoc-mode)
(setq elpy-rpc-python-command "python3")
(setq elpy-shell-echo-output nil)
(setq python-shell-completion-native-enable nil)
(setq python-indent-offset 4
      python-indent 4)
;;;;;; (setq elpy-rpc-backend "jedi") ;;; not needed as of now
 
;;;;;; quick help box in autocompete
(company-quickhelp-mode 1)
(eval-after-load 'company '(define-key company-active-map (kbd "C-c h") #'company-quickhelp-manual-begin)) 
(setq company-quickhelp-color-background "dim gray")
;;;;;;; END Python IDE configuration ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

#+end_src


* Org-Mode

#+begin_src emacs-lisp
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(org-level-1 ((t (:inherit outline-1 :height 1.3))))
 '(org-level-2 ((t (:inherit outline-2 :height 1.2))))
 '(org-level-3 ((t (:inherit outline-3 :height 1.1))))
 '(org-level-4 ((t (:inherit outline-4 :height 1.0))))
 '(org-level-5 ((t (:inherit outline-5 :height 1.0)))))
;; set maximum indentation for description lists
(setq org-list-description-max-indent 5)

;; prevent demoting heading also shifting text inside sections
(setq org-adapt-indentation nil)

;; setting to allow sizing of JPG and PNGs in org-mode
(setq org-image-actual-width nil)


#+end_src

  
** Block Template
#+begin_src emacs-lisp

  ;; This is needed as of Org 9.2
  (require 'org-tempo)

  (add-to-list 'org-structure-template-alist '("sh" . "src sh"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))

#+end_src

** Auto-tangle Configuration File
This snippet adds a hook to =org-mode= buffers so that =efs/org-babel-tangle-config= gets executed each time such a buffer gets saved.  This function checks to see if the file being saved is the Emacs.org file you're looking at right now, and if so, automatically exports the configuration here to the associated output files.

#+begin_src emacs-lisp
  ;; Automatically tangle our Emacs.org config file when we save it
  (defun efs/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/.dotfiles/emacs.org"))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))

#+end_src

#+RESULTS:
| (lambda nil (add-hook 'after-save-hook #'efs/org-babel-tangle-config)) | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-show-all append local] 5] | #[0 \300\301\302\303\304$\207 [add-hook change-major-mode-hook org-babel-show-result-all append local] 5] | org-babel-result-hide-spec | org-babel-hide-all-hashes |



