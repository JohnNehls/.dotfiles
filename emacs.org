;#+TITLE: Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle .emacs.d/init.el
#+STARTUP: content
* Setup
** Use-package
Use-package is like a package manager. [[https://github.com/jwiegley/use-package][Use-Package Documentation]]
Packages: Elpa is default, Melpa is community.
#+begin_src emacs-lisp
  ;; Initialize package sources
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
			   ("org" . "https://orgmode.org/elpa/")
			   ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)

  (unless package-archive-contents
   (package-refresh-contents))

  ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
     (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t) ; no need for :ensure t for each package.

  (use-package command-log-mode)
#+end_src

** Auto-tangle
This snippet adds a hook to =org-mode= buffers so that =efs/org-babel-tangle-config= gets executed each time such a buffer gets saved.  This function checks to see if the file being saved is the Emacs.org file you're looking at right now, and if so, automatically exports the configuration here to the associated output files.

#+begin_src emacs-lisp
  ;; Automatically tangle our Emacs.org config file when we save it
  (defun efs/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/.dotfiles/emacs.org"))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))
#+end_src

* General Emacs
** UI Configurations
*** Basic
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)           ; inhibit startup message
  (tool-bar-mode -1)                         ; remove toolbar
  (scroll-bar-mode -1)                       ; remove side scrollbar
  (tooltip-mode -1)                          ; Disable tooltips
  (set-fringe-mode 10)                       ; Give some breathing room
  (add-hook 'text-mode-hook 'flyspell-mode)  ; enable spellcheck on text mode
  (setq make-backup-files nil)               ; stop creating backup~ files
  (setq auto-save-default nil)               ; stop creating #autosave# files
  (menu-bar-mode -1)                        ; Disable the menu bar


  ;; Open text files in Org-Mode
  (add-to-list 'auto-mode-alist '("\\.text\\'" . org-mode)) 
  (add-to-list 'auto-mode-alist '("\\.txt\\'" . org-mode))

  ;; Set up the visible bell
  (setq visible-bell t)

#+end_src

*** Line numbers 
#+begin_src emacs-lisp
  ;Disable line numbers for some modes
   (dolist (mode '(org-mode-hook
                   term-mode-hook
                   shell-mode-hook
                   treemacs-mode-hook
                   eshell-mode-hook))
     (add-hook mode (lambda () (display-line-numbers-mode 0))))

  (global-display-line-numbers-mode t)     ; Puts line numbers on ALL buffers
#+end_src

*** Theme
Doom and Greduan's themes seem to be better than built-in themes due to their wide support and definitions. They account for the different modes' nuances.
Favorites: gruvbox, gruvbox-hard, doom-tomorrow-night

#+begin_src emacs-lisp
  (use-package gruvbox-theme
      :init (load-theme 'gruvbox t))
#+end_src

*** Transparency
Use the transparency function defined below to adjust levels during a session. 
#+begin_src emacs-lisp
 (defun transparency (value)
   "Sets the transparency of the frame window. 0=transparent/100=opaque"
   (interactive "nTransparency Value 0 - 100 opaque:")
   (set-frame-parameter (selected-frame) 'alpha value))
(transparency 94)  ;; Default value (generally e [94,96]
#+end_src

*** Modeline 
**** Delight
Enables you to customize the mode names displayed in the mode line.
#+begin_src emacs-lisp
(use-package delight)
#+end_src

**** Doom-modeline (not used)
*NOTE*: The first time you load your configuration on a new machine, you’ll need to run `M-x all-the-icons-install-fonts` so that mode line icons display correctly.
#+begin_src emacs-lisp  :tangle no
  (use-package all-the-icons)
  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)))
#+end_src

#+RESULTS:
** Input Buffer, Directory Search, and Help
*** Ivy, Ivy-Rich, and Counsel
Ivy displays vertical completions of input buffer.
#+begin_src emacs-lisp
    (use-package ivy
      :delight ivy-mode
      :config
      (ivy-mode 1))
#+end_src
Ivy-rich provides information to display in input buffer to counsel.
#+begin_src emacs-lisp
  (use-package ivy-rich
    :init
    (ivy-rich-mode 1))
#+end_src
Along with ivy-rich, counsel displays info along with suggestions in input buffer.
#+begin_src emacs-lisp
  (use-package counsel
    :bind (("M-x" . counsel-M-x)
	   ("C-x b" . counsel-ibuffer)
	   ("C-x C-f" . counsel-find-file)
	   :map minibuffer-local-map
	   ;("C-r" . 'counsel-minibuffer-history)
	   ))
#+end_src
o
*** Which-key
#+begin_src emacs-lisp
  (use-package which-key
   :delight which-key-mode  ;remove name from minor mode list
    :init (which-key-mode)
    :config
    (setq which-key-idle-delay 1.0))
#+end_src

*** Treemacs
- treemacs shows folder contents.
- lsp-treemacs-symbols shows file contents: classes functions etc
- lsp-treemacs-references 
#+begin_src emacs-lisp
  (use-package lsp-treemacs
    :after lsp)
#+end_src

*** Helpful
Better version of help. Remap normal help keys to Helpful's versions. 
#+begin_src emacs-lisp
(use-package helpful
  :custom
  (counsel-describe-function-function #'helpful-callable)
  (counsel-describe-variable-function #'helpful-variable)
  :bind
  ([remap describe-function] . counsel-describe-function)
  ([remap describe-command] . helpful-command)
  ([remap describe-variable] . counsel-describe-variable)
  ([remap describe-key] . helpful-key))
#+end_src

** Keybindings
Make <Esc> quit prompts
#+begin_src emacs-lisp
(global-set-key (kbd "<escape>") 'keyboard-escape-quit)
#+end_src

**** TODO Improve work flow
Eventually create my own keybindings as shown [[https://www.youtube.com/watch?v=xaZMwNELaJY][here]]. 
hydra    ; ties related commands into short bindings with a common prefix
* Development Tools 
** Rainbow Delimiters
** Smartparens
Auto-creates closing parenthesis and bar and, smartly, writes it over. 
#+begin_src emacs-lisp
  (use-package smartparens
    :delight smartparens-mode)
#+end_src

** Magit
Git interface. Custom variable displays Magit status buffer in the same buffer rather than splitting it. 
#+begin_src emacs-lisp
(use-package magit
  :custom
  (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
#+end_src

** Projectile
Allows me to set project-wide commands and variables. [[https://docs.projectile.mx/projectile/index.html][Projectile Documentation]]
Notably: run, debug, project-variables, grep (and rg).
#+begin_src emacs-lisp
  (use-package projectile
    ;; :delight projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    ;; NOTE: Set this to the folder where you keep your Git repos!
    (when (file-directory-p "~/Projects/Code")
      (setq projectile-project-search-path '("~/Projects/Code")))
    (setq projectile-switch-project-action #'projectile-dired))

  (use-package counsel-projectile
    :config (counsel-projectile-mode))
#+end_src

** Language Server Protocol (lsp-mode)
Provides language backend to company-mode (which is run when lsp is run). 
#+begin_src emacs-lisp  
  (use-package lsp-mode
    :delight lsp-mode
    :commands (lsp)
    :init
    (setq lsp-keymap-prefix "C-c l") ;; or "C-l"
    :config
    (lsp-enable-which-key-integration t))
#+end_src

*** lsp-ui
Provides advanced help and suggestions to the lsp-mode suggestions. Some info is provided in sideline box. 
Including:  lsp-ui-sideline, lsp-ui-peek, mouse-hover "help box, etc
Automatically starts along with lsp-mode.  [[https://emacs-lsp.github.io/lsp-ui/][lsp-ui documentation]]
#+begin_src emacs-lisp  
  (use-package lsp-ui)
#+end_src

** Company-Mode
Currently gets called by lsp-mode by default. //my understanding// It is the auto-complete box that lsp provides information to. Company-box-mode brings up a another box with information about the highlighted recommended item in the company/lsp box. 
#+begin_src emacs-lisp  
  (use-package company
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0)
    :bind (:map lsp-mode-map ("<tab>" . company-indent-or-complete-common)))

  (use-package company-box
    :hook (company-mode . company-box-mode))

#+end_src

** Yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet
    :diminish yas-minor-mode)
  (use-package yasnippet-snippets) ; load basic snippets from melpa
#+end_src

** Flycheck
#+begin_src emacs-lisp
(use-package flycheck
:delight flycheck-mode)
#+end_src

** Dap Debugging
Like lsp-mode but for debuggers. 
#+begin_src emacs-lisp
(use-package dap-mode
:delight dap-mode
)
#+end_src

* C++
**  Hook
LSP-mode works with clangd (which currently is already loaded-- likely from irony mode (elpy dependency?). 
#+begin_src emacs-lisp   
  (setq-default c-basic-offset 4)

  (defun my-c-c++-mode-hook-fn ()
    (lsp)                ; turn on
    (smartparens-mode)   ; turn on
    (local-set-key (kbd "<tab>") #'company-indent-or-complete-common) ;tab comp
    (yas-minor-mode-on)  ; turn on
    (abbrev-mode -1)        ; turn off
    ;; flycheck -- already running Delighted
    ;; Dap-mod  -- already running Delighted
    (delight 'c++-mode "C++" "C++//l") ; shorten modeline tag
    )
  (add-hook 'c-mode-hook #'my-c-c++-mode-hook-fn)
  (add-hook 'c++-mode-hook #'my-c-c++-mode-hook-fn)

#+end_src

** Future Ideas
   - lsp-treemacs       ; Tree renderer-- have not explored yet
   - avy      ; Jumping to visible text using a char-based decision tree
   - company (with company-fix for fuzzy filtering completion)
   - eldoc-box -documentation popup under curser for supported modes

* Python
As of now, all we use is Elpy. Though, for more continuity with my C++-mode, I'd like replace it with  lsp-mode, dap, yasnippet, flycheck, etc. Video showing how to do this is [[https://www.youtube.com/watch?v=jPXIP46BnNA&t=1s][here]].
** Elpy
#+begin_src emacs-lisp
  (use-package elpy
    :init (elpy-enable) ;enables Elpy in all future python buffers
    :custom
    (python-shell-interpreter "ipython")
    (python-shell-interpreter-args "-i --simple-prompt")
    (elpy-rpc-python-command "python3")
    (elpy-shell-echo-output nil)
    ;(elpy-rpc-backend "jedi")
    ;; Not sure if the following should really be here
    (python-shell-completion-native-enable nil)
    (python-indent-offset 4)
    (python-indent 4)
    )
#+end_src

** Hook
#+begin_src emacs-lisp    
  (defun my-python-mode-hook-fn ()
    (smartparens-mode)
    (local-set-key (kbd "<tab>") #'company-indent-or-complete-common)
    )
  (add-hook 'c-mode-hook #'my-python-mode-hook-fn)
#+end_src

* Org-Mode
** Mode setup
#+begin_src emacs-lisp 
  (defun efs/org-mode-setup ()
        (org-indent-mode)
        (variable-pitch-mode 1)
        (visual-line-mode 1)
        (projectile-mode -1) ;; turn it off
)
#+end_src

** Fonts 
#+begin_src emacs-lisp
  (defun efs/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                       '(("^ *\\([-]\\) "
                        (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
    ;; Elipsis
     (setq org-ellipsis " ▾")
    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))
#+end_src

** Start
#+begin_src emacs-lisp
    (use-package org
        :hook (org-mode . efs/org-mode-setup)
        :config
        (efs/org-font-setup))
#+end_src

** Bullets
#+begin_src emacs-lisp 
  (use-package org-bullets
    :after org
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src

** Center column
#+begin_src emacs-lisp 
(defun efs/org-mode-visual-fill ()
  (setq visual-fill-column-width 100
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
  :hook (org-mode . efs/org-mode-visual-fill))

#+end_src

** Block Templates
#+begin_src emacs-lisp  
  ;; This is needed as of Org 9.2
  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("sh" . "src sh"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))

#+end_src

** Fixes
#+begin_src emacs-lisp  
   ;; setting to allow sizing of JPG and PNGs in org-mode
   (setq org-image-actual-width nil)
#+end_src

#+RESULTS:

* Localwords
#  LocalWords:  IDE solarized gruvbox vertico Magit Quickhelp Elpy Elisp Neotree Greduan's Localwords Esc  Smartparens UI Helpful's Yasnippet LSP Modeline Dap Flycheck modeline

#  LocalWords:  Treemacs backend lsp
