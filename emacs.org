#+TITLE: Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle .emacs.d/init.el
#+STARTUP: overview
* Setup
** Silence Native Compilation Warnings
#+begin_src emacs-lisp
(setq comp-async-report-warnings-errors nil)
#+end_src

** Startup Performance
*** Garbage Collection
A more advanced garbage collection "hack". https://github.com/emacsmirror/gcmh
For me this does not speed up anything.
#+begin_src emacs-lisp
  (add-to-list 'load-path "~/.dotfiles/.emacs.d/elpa/gcmh-20201116.2251")
  (gcmh-mode 1)
#+end_src

*** UNUSED Startup Timer
Currently the dashboard does this automatically for me.
#+begin_src emacs-lisp  :tangle no
  (defun efs/display-startup-time ()
    (message "Emacs loaded in %s with %d garbage collections."
             (format "%.2f seconds"
                     (float-time
                       (time-subtract after-init-time before-init-time)))
             gcs-done))

  (add-hook 'emacs-startup-hook #'efs/display-startup-time)
#+end_src

** Use-package
Use-package is like a package manager. [[https://github.com/jwiegley/use-package][Use-Package Documentation]]
Package archives: Elpa is default, Melpa is community.
#+begin_src emacs-lisp
  ;; Initialize package sources
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)

  (unless package-archive-contents
    (package-refresh-contents))

  ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t) ; no need for :ensure t for each package.
  (setq use-package-verbose t) ; log configure/loading messages in *Messages*
#+end_src

** Auto-tangle
This snippet adds a hook to =org-mode= buffers so that =efs/org-babel-tangle-config= gets executed each time such a buffer gets saved.  This function checks to see if the file being saved is the Emacs.org file you're looking at right now, and if so, automatically exports the configuration here to the associated output files.
#+begin_src emacs-lisp
  ;; Automatically tangle our Emacs.org config file when we save it
  (defun efs/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/.dotfiles/emacs.org"))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))
#+end_src

** Automatic Package Updates
The auto-package-update package helps us keep Emacs packages up to date.  It will prompt you after a certain number of days either at startup or at a specific time of day to remind you to update your packages.

You can also use =M-x auto-package-update-now= to update right now!

#+begin_src emacs-lisp 

  (use-package auto-package-update
    :custom
    (auto-package-update-interval 30)
    (auto-package-update-prompt-before-update t)
    (auto-package-update-hide-results t)
    :config
    (auto-package-update-maybe)
    (auto-package-update-at-time "09:00"))

#+end_src

* General Emacs
** UI Configurations
*** Basic
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)           ; inhibit startup message
  (tool-bar-mode -1)                         ; remove toolbar
  (menu-bar-mode -1)                         ; Disable the menu bar
  (scroll-bar-mode -1)                       ; remove side scrollbar
  (tooltip-mode -1)                          ; Disable tooltips
  (set-fringe-mode 10)                       ; Give some breathing room
  (setq visible-bell t)                      ; Set up the visible bell

  (add-hook 'text-mode-hook 'flyspell-mode)  ; enable spellcheck on text mode
  (add-hook 'prog-mode-hook 'hl-line-mode)   ; highlight lines when programming

  ;; Open text files in Org-Mode
  (add-to-list 'auto-mode-alist '("\\.text\\'" . org-mode))
  (add-to-list 'auto-mode-alist '("\\.txt\\'" . org-mode))
#+end_src

*** Scrolling
#+begin_src emacs-lisp
  (use-package emacs
    :custom
    ;; Fully redraw the display before it processes queued input events.
    (redisplay-dont-pause            t)
    ;; Number of lines of continuity to retain when scrolling by full screens
    (next-screen-context-lines       2)
    ;; only 'jump' when moving this far off the screen
    (scroll-conservatively       10000)
    (scroll-step                     1) ;; Keyboard scroll one line at a time
    (mouse-wheel-progressive-speed nil) ;; Don't accelerate scrolling
    (mouse-wheel-follow-mouse        t) ;; Scroll window under mouse
    (fast-but-imprecise-scrolling    t) ;; No (less) lag while scrolling lots.
    (auto-window-vscroll           nil) ;; Cursor move faster
    )
#+end_src

#+RESULTS:

**** Fast Scroll
To ensure scrolling is fast in Emacs, I use a package that disables non-essential things while the window is being scrolled:
#+begin_src emacs-lisp
(use-package fast-scroll
  :ensure t
  :demand t
  :config
  (add-hook 'fast-scroll-start-hook (lambda () (flycheck-mode -1)))
  (add-hook 'fast-scroll-end-hook (lambda () (flycheck-mode 1)))
  (fast-scroll-config)
  (fast-scroll-mode 1))
#+end_src

#+RESULTS:
: t

*** Better undo
    - =C-x u= visualizes undo history as a tree for easy navigation
    - =C-_= undo
    - =M-_= redo
#+begin_src emacs-lisp
  (use-package undo-tree
    :defer 2
    :config
    (global-undo-tree-mode 1))
#+end_src

*** TODO Backup files
As of now I eliminate the creation of backup files with the following steps. A better solution would be to "clean up" the files by creating the backup files in =.emacs.d= rather than the local directory. Daviwill does this in his configuration.
#+begin_src emacs-lisp
  (setq make-backup-files nil)               ; stop creating backup~ files
  (setq auto-save-default nil)               ; stop creating #autosave# files
#+end_src

*** Line numbers
#+begin_src emacs-lisp
     (dolist (mode '(org-mode-hook
                     term-mode-hook
                     shell-mode-hook
                     treemacs-mode-hook
                     eshell-mode-hook
                     vterm-mode-hook))
       (add-hook mode (lambda () (display-line-numbers-mode 0))))

    (global-display-line-numbers-mode t)     ; Puts line numbers on ALL buffers
#+end_src

*** Theme
#+begin_src emacs-lisp
  (use-package monokai-theme
      :init (load-theme 'monokai t))
  ;; Saving my SECOND favorite theme which is easier on the eyes.
  ;; (use-package gruvbox-theme
  ;;     :init (load-theme 'gruvbox-dark-hard t))

#+end_src

*** Modeline 
**** Doom-modeline
*NOTE*: The first time you load your configuration on a new machine, you’ll need to run =M-x all-the-icons-install-fonts= so that mode line icons display correctly.
#+begin_src emacs-lisp  
  (use-package all-the-icons)
  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)))
#+end_src

**** Delight (used?)
Enables you to customize the mode names displayed in the mode line.
#+begin_src emacs-lisp  :tangle no
(use-package delight)
#+end_src

**** Diminish(used?)
#+begin_src emacs-lisp  :tangle no
  (use-package diminish)
#+end_src

*** Transparency
#+begin_src emacs-lisp
   (defun transparency (value)
     "Sets the transparency of the frame window. 0=transparent/100=opaque"
     (interactive "nTransparency Value 0 - 100 opaque:")
     (set-frame-parameter (selected-frame) 'alpha value))

  (transparency 96)  ;; Default value generally e [94,96]
#+end_src

*** Auto-clean white space
#+begin_src emacs-lisp
(use-package ws-butler
  :hook ((text-mode . ws-butler-mode)
         (prog-mode . ws-butler-mode)))
#+end_src

*** Make  =yes or no= prompts shorter
#+begin_src emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+end_src

*** TODO buffers
Present a list of currently open buffers when you split the window.
#+begin_src emacs-lisp  :tangle no
(defadvice! (switch-to-buffer)
  :after 'window-split (switch-to-buffer))
#+end_src

*** Dashboard
https://github.com/emacs-dashboard/emacs-dashboard

For the icons to display correctly, I needed to =all-of-the-icons-install-fonts=.
#+begin_src emacs-lisp
  (recentf-mode 1) ;; needed for recent files in dashboard

  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-center-content 1)
    (setq dashboard-show-shortcuts nil)
    (setq dashboard-items '((recents  . 7)
                            ;; (bookmarks . 5)
                            (projects . 5)
                            (agenda . 5)
                            ;; (registers . 5)
                            ))
    (setq dashboard-set-heading-icons t)
    (setq dashboard-set-file-icons t)
    (setq dashboard-projects-backend 'projectile)

    (dashboard-modify-heading-icons '((recents . "file-text")))


    (setq dashboard-set-footer nil)
    )
#+end_src

** Goto last change
Sometimes it's useful to step to the last change in a buffer.
#+begin_src emacs-lisp
  (use-package goto-last-change
    :ensure t
    :bind ("C-;" . goto-last-change))
    ;; :hook (org-mode . goto-last-change))

#+end_src

#+RESULTS:
: goto-last-change

** Input Buffer, Directory Search, and Help
*** Ivy, Ivy-Rich, and Counsel
Ivy displays vertical completions of input buffer.
#+begin_src emacs-lisp
  (use-package ivy
    :delight ivy-mode
    :config
    (ivy-mode 1)
    ;; remove ^ on the inputbuffer
    (setq ivy-initial-inputs-alist nil))
#+end_src

#+RESULTS:
: t

Ivy-rich provides information to display in input buffer to counsel.
#+begin_src emacs-lisp
  (use-package ivy-rich
    :after ivy
    :init  
    (ivy-rich-mode 1))
#+end_src
Counsel displays ivy-rich info along with suggestions in input buffer. Remember =M-o= allows access of help in input buffer. 
#+begin_src emacs-lisp
  (use-package counsel
    :bind (("M-x" . counsel-M-x)      ; displays ivy-rich info in minibuffer
           ("C-x C-f" . counsel-find-file)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history)
           ))
#+end_src

prescient.el provides some helpful behavior for sorting Ivy completion candidates based on how recently or frequently you select them. This can be especially helpful when using M-x to run commands that you don’t have bound to a key but still need to access occasionally.

This Prescient configuration is optimized for use in System Crafters videos and streams, check out the video on prescient.el for more details on how to configure it!
#+begin_src emacs-lisp
  (use-package ivy-prescient
    :after counsel
    :custom
    (ivy-prescient-enable-filtering nil)
    :config
    ;; Uncomment the following line to have sorting remembered across sessions!
    (prescient-persist-mode 1)
    (ivy-prescient-mode 1))
#+end_src

*** Which-key
#+begin_src emacs-lisp
  (use-package which-key
    :defer 0
    :delight which-key-mode  
    :config(which-key-mode)
    (setq which-key-idle-delay 0.8))
#+end_src

*** Treemacs
- Treemacs shows folder contents.
- lsp-treemacs-symbols shows file contents: classes functions etc
- lsp-treemacs-references 
#+begin_src emacs-lisp
  (use-package lsp-treemacs
    :after lsp)
#+end_src

*** Helpful
Better version of help. We remap normal help keys to Helpful's versions. 
#+begin_src emacs-lisp
  (use-package helpful
  :commands (helpful-callable helpful-variavle helpful-command helpful-key)
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
#+end_src

** Keybindings
#+begin_src emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  (global-set-key (kbd "C-o") 'other-window)

  ;; (global-unset-key (kbd "C-<SPC>"))
  ;; (global-unset-key (kbd "C-m"))
  ;; (global-set-key (kbd "C-m") 'set-mark-command)
  ;; (global-set-key (kbd "C-<SPC>") 'other-window)
  ;; (global-set-key (kbd "M-SPC") 'other-window)
#+end_src

#+RESULTS:
: other-window

Future: create my own keybindings as shown [[https://www.youtube.com/watch?v=xaZMwNELaJY][here]]. hydra ties related commands into short bindings with a common prefix.

* TODO Grammarly
There looks to be several packages at the moment. Top two (as of 1/10/22) are installed here without proper hooks. 
** flycheck-grammarly   
Works w/o being logged in.                         [[https://github.com/emacs-grammarly/flycheck-grammarly][flycheck-grammarly doc]]
#+begin_src emacs-lisp  :tangle no
  (use-package flycheck-grammarly
  :config
  (setq flycheck-grammarly-check-time 0.8)
#+end_src

**  lsp-grammarly
Gives warning on startup for login.    [[ https://github.com/emacs-grammarly/lsp-grammarly][lsp-grammarly doc]]
#+begin_src emacs-lisp  :tangle no
  (use-package lsp-grammarly
  :ensure t
  :hook (text-mode . (lambda ()
                       (require 'lsp-grammarly)
                       (lsp))))  ; or lsp-deferred
#+end_src

#+RESULTS:
* Development
** Parens/delimiters

#+begin_src emacs-lisp
(show-paren-mode    1) ; Highlight parentheses pairs.
(electric-pair-mode 1) ; Close pairs automatically.
#+end_src

*** Rainbow Delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

*** Smartparens
Auto-creates closing parenthesis and bar and, smartly, writes it over if it is typed.
#+begin_src emacs-lisp
  (use-package smartparens
    :delight smartparens-mode
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** Magit
[[https://magit.vc/][Magit Documentation]]
#+begin_src emacs-lisp
  (use-package magit
    :commands (magit-status)
    :custom
    ;display Magit status buffer in the same buffer rather than splitting it. 
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
#+end_src

** Projectile
Allows me to set project-wide commands and variables. [[https://docs.projectile.mx/projectile/index.html][Projectile Documentation]]
Notably: run, debug, project-variables, grep (and rg).
#+begin_src emacs-lisp
  (use-package projectile
    :after lsp
    ;; :delight projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    ;; NOTE: Set this to the folder where you keep your Git repos!
    (when (file-directory-p "~/Projects/Code")
      (setq projectile-project-search-path '("~/Projects/Code")))
    (setq projectile-switch-project-action #'projectile-dired))

  (use-package counsel-projectile
    :after projectile-mode
    :config (counsel-projectile-mode))
#+end_src

** lsp-mode
*** lsp-mode
Provides language backend to company-mode.
#+begin_src emacs-lisp  
  (use-package lsp-mode
    :delight lsp-mode
    :commands (lsp lsp-deferred)
    :init
    (setq lsp-keymap-prefix "C-c l") ;; or "C-l"
    :custom ((lsp-idle-delay 0.2))
    :config
    (lsp-enable-which-key-integration t)
    ;; Annoying stuff (uncomment to turn off)
    (setq lsp-enable-links nil)
    ;; (setq lsp-signature-render-documentation nil)
    ;; (setq lsp-headerline-breadcrumb-enable nil)
    ;; (setq lsp-ui-doc-enable nil)
    ;; (setq lsp-completion-enable-additional-text-edit nil)
    )
#+end_src

*** lsp-ui
Provides additional lsp information to the company-mode box. The mode provides info when hoovered by mouse. [[https://emacs-lsp.github.io/lsp-ui/][lsp-ui documentation]]

*Note:* Functions also display the proceeding C++ function comments as documentation
#+begin_src emacs-lisp  
  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode) ; for elpy
    :custom
    (lsp-ui-doc-position 'bottom))
#+end_src

*** lsp-ivy
[[https://github.com/emacs-lsp/lsp-ivy][lsp-ivy]] integrates Ivy with =lsp-mode= to make it easy to search for things by name in your code.  When you run these commands, a prompt will appear in the minibuffer allowing you to type part of the name of a symbol in your code.  Results will be populated in the minibuffer so that you can find what you're looking for and jump to that location in the code upon selecting the result.

Try these commands with =M-x=:
- =lsp-ivy-workspace-symbol= - Search for a symbol name in the current project workspace
- =lsp-ivy-global-workspace-symbol= - Search for a symbol name in all active project workspaces.

#+begin_src emacs-lisp
  (use-package lsp-ivy
    :after lsp)
#+end_src

** Company-Mode
Currently company-mode gets called with lsp-mode by default. //my understanding//: company-mode provides the auto-complete box that lsp provides information to. 
#+begin_src emacs-lisp  
  (use-package company
    :after lsp
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0)
    :bind (:map lsp-mode-map ("<tab>" . company-indent-or-complete-common)))
#+end_src

*Company-box-mode* brings up a another box with information about the highlighted recommended item in the company/lsp box. 
#+begin_src emacs-lisp
   (use-package company-box
     :delight company-box-mode 
     :hook (company-mode . company-box-mode))
#+end_src

#+begin_src emacs-lisp
(use-package company-prescient
  :defer 2
  :after company
  :config
  (company-prescient-mode +1))
#+end_src

** Yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet
    :delight( yas-minor-mode)
    :after lsp)

  (use-package yasnippet-snippets
    :after yas-minor-mode) ; load basic snippets from melpa
#+end_src

** Flycheck
Checks the code for bugs on the fly.
#+begin_src emacs-lisp
  (use-package flycheck
    :diminish flycheck-mode
    :after lsp)
#+end_src

** Dap Debugging
Like lsp-mode but for debuggers. 
#+begin_src emacs-lisp
  (use-package dap-mode
    :commands dap-mode)
#+end_src

** Evil nerd commenter
#+begin_src emacs-lisp
  (use-package evil-nerd-commenter
  :bind ("M-;". evilnc-comment-or-uncomment-lines))
#+end_src

* C++
** Smart compile
#+begin_src emacs-lisp
  (use-package smart-compile
    :commands smart-compile)
#+end_src

** Hook
  Currently lsp-mode works with clangd backend without any initial setup.
  company-clang needs =clang= installed on the system.
  #+begin_src emacs-lisp   
    (setq-default c-basic-offset 2)

    (defun my-c-c++-mode-hook-fn ()
      (lsp)                ; turn on
      (local-set-key (kbd "C-<tab>") #'lsp-format-buffer) ;tab comp
      (yas-minor-mode 1)  ; turn on
      )

    (add-hook 'c-mode-hook #'my-c-c++-mode-hook-fn)
    (add-hook 'c++-mode-hook #'my-c-c++-mode-hook-fn)
#+end_src

* Python
** Python-mode
*** Pyright 
#+begin_src emacs-lisp   
  ; npm must be installed on the system.
    (use-package lsp-pyright
      :after lsp
      :hook (python-mode . (lambda ()
                              (require 'lsp-pyright)
                              (lsp))))  ; or lsp-deferred
#+end_src

*** python-mode
#+begin_src emacs-lisp 
   ;; configure pythong-mode
   (use-package python-mode
     :ensure nil ; don't install, use the pre-installed version

     :custom
     (python-shell-completion-native-enable 1)
     (python-shell-interpreter "ipython")
     (python-shell-interpreter-args "-i --simple-prompt")
                                           ; this command doesn't work BUT without, python-mode "won't load".
     :bind (:map python-mode-map ("C-RET" . python-shell-send-statement))
     )
#+end_src

*** TODO Formatting
Want simple formatting checker (flycheck). There is currently an issue with flake8.
** Hook
#+begin_src emacs-lisp  
  (defun my-python-mode-hook-fn ()
    (lsp)
    (company-mode 1)
    (smartparens-mode)
    (local-set-key (kbd "<tab>") #'company-indent-or-complete-common))

  (add-hook 'python-mode-hook #'my-python-mode-hook-fn)
#+end_src

* Org-Mode
** Mode setup
#+begin_src emacs-lisp 
  (defun jmn/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1)
    (rainbow-delimiters-mode 0)
    (projectile-mode -1)
    ;; edit the modeline-- not needed for doom-modeline
    ;; (diminish 'visual-line-mode)
    ;; (diminish 'flyspell-mode)
    ;; (diminish 'org-indent-mode)
    ;; (diminish 'buffer-face-mode)
    ;; (diminish 'yas-minor-mode)
    ;; (diminish 'eldoc-mode)
    )
#+end_src

** Fonts 
#+begin_src emacs-lisp
         (defun jmn/org-font-setup ()

           ;; Replace list hyphen with dot
           (font-lock-add-keywords 'org-mode
                              '(("^ *\\([-]\\) "
                               (0 (prog1 () (compose-region (match-beginning 1)
                                                            (match-end 1) "•"))))))

           ;; Set faces for heading levels
           (dolist (face '((org-level-1 . 1.2)
                           (org-level-2 . 1.1)
                           (org-level-3 . 1.05)
                           (org-level-4 . 1.0)
                           (org-level-5 . 1.1)
                           (org-level-6 . 1.1)
                           (org-level-7 . 1.1)
                           (org-level-8 . 1.1)))
             (set-face-attribute (car face) nil :font "Cantarell"
                                 :weight 'regular :height (cdr face)))

           ;; Ensure that anything that should be fixed-pitch in Org files appears that way
           (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
           (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
           (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
           (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
           (set-face-attribute 'org-special-keyword nil
                               :inherit '(font-lock-comment-face fixed-pitch))
           (set-face-attribute 'org-meta-line nil
                               :inherit '(font-lock-comment-face fixed-pitch))
           (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))
#+end_src

** Start
#+begin_src emacs-lisp
  (use-package org
    :commands (org-capture org-agenda)
    :hook (org-mode . jmn/org-mode-setup)
    :config
    (jmn/org-font-setup)
    (setq org-ellipsis " ▾"
          org-hide-emphasis-markers t
          org-src-fontify-natively t
          org-fontify-quote-and-verse-blocks t
          org-src-tab-acts-natively t
          org-edit-src-content-indentation 2
          org-hide-block-startup nil
          org-src-preserve-indentation nil
          org-startup-folded 'content
          org-cycle-separator-lines 2
          org-capture-bookmark nil
          org-image-actual-width nil) ; fix to allow picture resizing
    )
#+end_src

** Bullets
#+begin_src emacs-lisp 
  (use-package org-bullets
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src

** Center column
#+begin_src emacs-lisp 
(defun efs/org-mode-visual-fill ()
  (setq visual-fill-column-width 100
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
  :hook (org-mode . efs/org-mode-visual-fill))

#+end_src

** Org-babel
#+begin_src emacs-lisp
  (org-babel-do-load-languages 'org-babel-load-languages
                                 (append org-babel-load-languages
                                  '((python . t)
                                    (latex  . t)
                                    (C      . t))))

  (setq org-confirm-babel-evaluate nil)

  (with-eval-after-load 'org
    ;; This is needed as of Org 9.2
    (require 'org-tempo)
    (add-to-list 'org-structure-template-alist '("la" . "src latex"))
    (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
    (add-to-list 'org-structure-template-alist '("py" . "src python  :results output"))
    (add-to-list 'org-structure-template-alist '("cpp" . "src C++  :includes <iostream>"))
    (add-to-list 'org-structure-template-alist '("cppnm" . "src C++  :main no"))
  )
#+end_src

** Keybindings
#+begin_src emacs-lisp
(global-set-key (kbd "C-c l") #'org-store-link)
(global-set-key (kbd "C-c a") #'org-agenda)
(global-set-key (kbd "C-c c") #'org-capture)
#+end_src

* Terminals
** term-mode
- Slower than vterm at printing large amounts of information. 
- For more than one terminal, you must M-x rename-uniquely the terminal.
- C-c prefix for term commands

Line-mode vs char-mode *selection shows on the modeline*:
C-c C-k -> char-mode
C-c C-j  -> line-mode
*** Better term-mode colors
#+begin_src emacs-lisp
(use-package eterm-256color
  :hook (term-mode . eterm-256color-mode))
#+end_src

** vterm
Faster terminal due to being compiled. Default is a better mode than term-mode; it's like a Char-mode but with ability to access function list with M-x.  [[https://github.com/akermu/emacs-libvterm][vterm Documentation]]
- For more than one terminal, you must M-x rename-uniquely the terminal.
- C-c prefix for term commands
- C-c C-c = send C-c to the terminal (kill running command)

#+begin_src emacs-lisp
  (use-package vterm
    :commands vterm
    :bind (:map vterm-mode-map ("C-o" . other-window))
    :config
    ;;(setq term-prompt-regexp "^[^$]*[$] *");; match your custom shell
    ;;(setq vterm-shell "zsh");; Set this to customize the shell to launch
    (setq vterm-max-scrollback 10000))

  (use-package vterm-toggle
    :ensure t
    :config
    (setq vterm-toggle-fullscreen-p nil)
    (add-to-list 'display-buffer-alist
                 '((lambda(bufname _) (with-current-buffer bufname (equal major-mode 'vterm-mode)))
                   (display-buffer-reuse-window display-buffer-at-bottom)
                   ;;(display-buffer-reuse-window display-buffer-in-direction)
                   ;;display-buffer-in-direction/direction/dedicated is added in emacs27
                   ;;(direction . bottom)
                   ;;(dedicated . t) ;dedicated is supported in emacs27
                   (reusable-frames . visible)
                   (window-height . 0.3)))
    )

  ;; (global-unset-key (kbd "C-t"))
  (global-set-key (kbd "C-t") 'vterm-toggle)

#+end_src

#+RESULTS:
: vterm-toggle



** shell-mode
Between term-mode eshell.

** eshell
More customization in Elisp. Supports Tramp. 

* File Management
** TODO Dired
More to do at [[https://youtu.be/PMWwM8QJAtU][here]].  Could not use "use-package" since dired packaged did not exist. Here we just modify dired without "use-package".
- "(" toggle file info
- M-x du  shows the size of the files in the buffer (toggle for human readable)
#+begin_src emacs-lisp
   (use-package dired
     :ensure nil
     :commands dired
     :custom  (setq dired-listing-switches "-agho --group-directories-first"))

   (use-package treemacs-icons-dired
     :after dired
     :config (treemacs-icons-dired-mode) )

  ;A rather janky mode which lists the recursive size of each foler/item in dired. 
   (use-package dired-du
     :commands du)
#+end_src

#+RESULTS:

* Localwords
#  LocalWords:  IDE solarized gruvbox vertico Magit Quickhelp Elpy Elisp Neotree Greduan's Localwords Esc  Smartparens UI Helpful's Yasnippet LSP Modeline Dap Flycheck modeline Treemacs backend lsp vterm eshell  Dired dracula clangd ui
#  LocalWords:  Grammarly workspaces commenter Pyright
