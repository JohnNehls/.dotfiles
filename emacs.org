#+TITLE: Emacs Configuration
#+PROPERTY: header-args:emacs-lisp :tangle .emacs.d/init.el
#+STARTUP: content
* Setup
** Startup Performance
Dial the GC threshold back down so that garbage collection happens more frequently but in less time. Display startup time in *Messages*.
#+begin_src emacs-lisp 
;; The default is 800 kilobytes.  Measured in bytes.
(setq gc-cons-threshold (* 50 1000 1000))

(defun efs/display-startup-time ()
  (message "Emacs loaded in %s with %d garbage collections."
           (format "%.2f seconds"
                   (float-time
                     (time-subtract after-init-time before-init-time)))
           gcs-done))

(add-hook 'emacs-startup-hook #'efs/display-startup-time)
#+end_src

A more advanced garbage collection hack is outlined https://github.com/emacsmirror/gcmh

** Use-package
Use-package is like a package manager. [[https://github.com/jwiegley/use-package][Use-Package Documentation]]
Packages: Elpa is default, Melpa is community.
#+begin_src emacs-lisp
  ;; Initialize package sources
  (require 'package)

  (setq package-archives '(("melpa" . "https://melpa.org/packages/")
                           ("org" . "https://orgmode.org/elpa/")
                           ("elpa" . "https://elpa.gnu.org/packages/")))

  (package-initialize)

  (unless package-archive-contents
    (package-refresh-contents))

  ;; Initialize use-package on non-Linux platforms
  (unless (package-installed-p 'use-package)
    (package-install 'use-package))

  (require 'use-package)
  (setq use-package-always-ensure t) ; no need for :ensure t for each package.
  (setq use-package-verbose t) ; to display starup messages in *Messages*

#+end_src

** Auto-tangle
This snippet adds a hook to =org-mode= buffers so that =efs/org-babel-tangle-config= gets executed each time such a buffer gets saved.  This function checks to see if the file being saved is the Emacs.org file you're looking at right now, and if so, automatically exports the configuration here to the associated output files.

#+begin_src emacs-lisp
  ;; Automatically tangle our Emacs.org config file when we save it
  (defun efs/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/.dotfiles/emacs.org"))
      ;; Dynamic scoping to the rescue
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'org-mode-hook (lambda () (add-hook 'after-save-hook #'efs/org-babel-tangle-config)))
#+end_src

** Automatic Package Updates
The auto-package-update package helps us keep Emacs packages up to date.  It will prompt you after a certain number of days either at startup or at a specific time of day to remind you to update your packages.

You can also use =M-x auto-package-update-now= to update right now!

#+begin_src emacs-lisp 

  (use-package auto-package-update
    :custom
    (auto-package-update-interval 30)
    (auto-package-update-prompt-before-update t)
    (auto-package-update-hide-results t)
    :config
    (auto-package-update-maybe)
    (auto-package-update-at-time "09:00"))

#+end_src

* General Emacs
** UI Configurations
*** Basic
#+begin_src emacs-lisp
  (setq inhibit-startup-message t)           ; inhibit startup message
  (tool-bar-mode -1)                         ; remove toolbar
  (scroll-bar-mode -1)                       ; remove side scrollbar
  (tooltip-mode -1)                          ; Disable tooltips
  (set-fringe-mode 10)                       ; Give some breathing room
  (add-hook 'text-mode-hook 'flyspell-mode)  ; enable spellcheck on text mode
  (setq make-backup-files nil)               ; stop creating backup~ files
  (setq auto-save-default nil)               ; stop creating #autosave# files
  (menu-bar-mode -1)                         ; Disable the menu bar
  (setq visible-bell t)                      ; Set up the visible bell

  ;; Open text files in Org-Mode
  (add-to-list 'auto-mode-alist '("\\.text\\'" . org-mode)) 
  (add-to-list 'auto-mode-alist '("\\.txt\\'" . org-mode))
#+end_src

*** Line numbers
#+begin_src emacs-lisp
     (dolist (mode '(org-mode-hook
                     term-mode-hook
                     shell-mode-hook
                     treemacs-mode-hook
                     eshell-mode-hook
                     vterm-mode-hook))
       (add-hook mode (lambda () (display-line-numbers-mode 0))))

    (global-display-line-numbers-mode t)     ; Puts line numbers on ALL buffers
#+end_src

*** Theme
Favorites: gruvbox, gruvbox-hard, doom-tomorrow-night, doom-dracula
#+begin_src emacs-lisp
  (use-package gruvbox-theme
      :init (load-theme 'gruvbox t))
#+end_src
*** Modeline 
**** Doom-modeline
*NOTE*: The first time you load your configuration on a new machine, you’ll need to run `M-x all-the-icons-install-fonts` so that mode line icons display correctly.
#+begin_src emacs-lisp  
  (use-package all-the-icons)
  (use-package doom-modeline
    :init (doom-modeline-mode 1)
    :custom ((doom-modeline-height 15)))
#+end_src

**** Delight (used?)
Enables you to customize the mode names displayed in the mode line.
#+begin_src emacs-lisp
(use-package delight)
#+end_src

**** Diminish(used?)
#+begin_src emacs-lisp
  (use-package diminish)
#+end_src

#+begin_src emacs-lisp
  (defun diminished-modes ()
    "Echo all active diminished or minor modes as if they were minor.
The display goes in the echo area; if it's too long even for that,
you can see the whole thing in the *Messages* buffer.
This doesn't change the status of any modes; it just lets you see
what diminished modes would be on the mode-line if they were still minor."
    (interactive)
    (let ((minor-modes minor-mode-alist)
          message)
      (while minor-modes
        (when (symbol-value (caar minor-modes))
          ;; This minor mode is active in this buffer
          (let* ((mode-pair (car minor-modes))
                 (mode (car mode-pair))
                 (minor-pair (or (assq mode diminished-mode-alist) mode-pair))
                 (minor-name (cadr minor-pair)))
            (when (symbolp minor-name)
              ;; This minor mode uses symbol indirection in the cdr
              (let ((symbols-seen (list minor-name)))
                (while (and (symbolp (callf symbol-value minor-name))
                            (not (memq minor-name symbols-seen)))
                  (push minor-name symbols-seen))))
            (push minor-name message)))
        (callf cdr minor-modes))
      ;; Handle :eval forms
      (setq message (mapconcat
                     (lambda (form)
                       (if (and (listp form) (eq (car form) :eval))
                           (apply 'eval (cdr form))
                         form))
                     (nreverse message) ""))
      (when (= (string-to-char message) ?\ )
        (callf substring message 1))
      (message "%s" message)))
#+end_src

*** Transparency
#+begin_src emacs-lisp
   (defun transparency (value)
     "Sets the transparency of the frame window. 0=transparent/100=opaque"
     (interactive "nTransparency Value 0 - 100 opaque:")
     (set-frame-parameter (selected-frame) 'alpha value))

  (transparency 94)  ;; Default value generally e [94,96]
#+end_src

** Input Buffer, Directory Search, and Help
*** Ivy, Ivy-Rich, and Counsel
Ivy displays vertical completions of input buffer.
#+begin_src emacs-lisp
  (use-package ivy
    :delight ivy-mode
    :config
    (ivy-mode 1))
#+end_src
Ivy-rich provides information to display in input buffer to counsel.
#+begin_src emacs-lisp
  (use-package ivy-rich
    :after ivy
    :init  
    (ivy-rich-mode 1))
#+end_src
Along with ivy-rich, counsel displays info along with suggestions in input buffer.
#+begin_src emacs-lisp
  (use-package counsel
    :bind (("M-x" . counsel-M-x)      ; displays ivy-rich info in minibuffer
           ("C-x C-f" . counsel-find-file)
           :map minibuffer-local-map
           ("C-r" . 'counsel-minibuffer-history)
           ))
#+end_src

**** Improved Candidate Sorting with prescient.el
prescient.el provides some helpful behavior for sorting Ivy completion candidates based on how recently or frequently you select them. This can be especially helpful when using M-x to run commands that you don’t have bound to a key but still need to access occasionally.

This Prescient configuration is optimized for use in System Crafters videos and streams, check out the video on prescient.el for more details on how to configure it!
#+begin_src emacs-lisp
(use-package ivy-prescient
  :after counsel
  :custom
  (ivy-prescient-enable-filtering nil)
  :config
  ;; Uncomment the following line to have sorting remembered across sessions!
  ;(prescient-persist-mode 1)
  (ivy-prescient-mode 1))
#+end_src

*** Which-key
#+begin_src emacs-lisp
  (use-package which-key
    :defer 0
    :delight which-key-mode  
    :config(which-key-mode)
    (setq which-key-idle-delay 0.2))
#+end_src

*** Treemacs
- treemacs shows folder contents.
- lsp-treemacs-symbols shows file contents: classes functions etc
- lsp-treemacs-references 
#+begin_src emacs-lisp
  (use-package lsp-treemacs
    :after lsp)
#+end_src

*** Helpful
Better version of help. Remap normal help keys to Helpful's versions. 
#+begin_src emacs-lisp
  (use-package helpful
  :commands (helpful-callable helpful-variavle helpful-command helpful-key)
    :custom
    (counsel-describe-function-function #'helpful-callable)
    (counsel-describe-variable-function #'helpful-variable)
    :bind
    ([remap describe-function] . counsel-describe-function)
    ([remap describe-command] . helpful-command)
    ([remap describe-variable] . counsel-describe-variable)
    ([remap describe-key] . helpful-key))
#+end_src

** Keybindings
Make <Esc> quit input prompts.
#+begin_src emacs-lisp
  (global-set-key (kbd "<escape>") 'keyboard-escape-quit)
  (global-set-key (kbd "C-o") 'other-window)
  (global-set-key (kbd "M-SPC") 'other-window) 
#+end_src
 
#+RESULTS: 
: other-window

**** Improve work flow (not used)
Eventually create my own keybindings as shown [[https://www.youtube.com/watch?v=xaZMwNELaJY][here]]. 
hydra ties related commands into short bindings with a common prefix.

* Development 
** Rainbow Delimiters
#+begin_src emacs-lisp
  (use-package rainbow-delimiters
    :hook (prog-mode . rainbow-delimiters-mode))
#+end_src

** Smartparens
Auto-creates closing parenthesis and bar and, smartly, writes it over if it is typed.
#+begin_src emacs-lisp
  (use-package smartparens
    :delight smartparens-mode)
#+end_src

** Magit
Git interface. Custom variable 
#+begin_src emacs-lisp
  (use-package magit
    :commands (magit-status)
    :custom
    ;display Magit status buffer in the same buffer rather than splitting it. 
    (magit-display-buffer-function #'magit-display-buffer-same-window-except-diff-v1))
#+end_src

** Projectile
Allows me to set project-wide commands and variables. [[https://docs.projectile.mx/projectile/index.html][Projectile Documentation]]
Notably: run, debug, project-variables, grep (and rg).
#+begin_src emacs-lisp
  (use-package projectile
    :after lsp
    ;; :delight projectile-mode
    :config (projectile-mode)
    :custom ((projectile-completion-system 'ivy))
    :bind-keymap
    ("C-c p" . projectile-command-map)
    :init
    ;; NOTE: Set this to the folder where you keep your Git repos!
    (when (file-directory-p "~/Projects/Code")
      (setq projectile-project-search-path '("~/Projects/Code")))
    (setq projectile-switch-project-action #'projectile-dired))

  (use-package counsel-projectile
    :after projectile-mode
    :config (counsel-projectile-mode))
#+end_src

** Language Server Protocol (lsp-mode)
Provides language backend to company-mode.
#+begin_src emacs-lisp  
  (use-package lsp-mode
    :delight lsp-mode
    :commands (lsp)
    :init
    (setq lsp-keymap-prefix "C-c l") ;; or "C-l"
    :config
    (lsp-enable-which-key-integration t))
#+end_src

*** lsp-ui
Provides additional lsp information to the company-mode box.  [[https://emacs-lsp.github.io/lsp-ui/][lsp-ui documentation]]
The mode provides info when hoovered by mouse.
*Note:* Functions also display the proceeding comments as documentation
#+begin_src emacs-lisp  
  (use-package lsp-ui
    :hook (lsp-mode . lsp-ui-mode) 
    :custom
    (lsp-ui-doc-position 'bottom))
#+end_src

*** lsp-ivy
[[https://github.com/emacs-lsp/lsp-ivy][lsp-ivy]] integrates Ivy with =lsp-mode= to make it easy to search for things by name in your code.  When you run these commands, a prompt will appear in the minibuffer allowing you to type part of the name of a symbol in your code.  Results will be populated in the minibuffer so that you can find what you're looking for and jump to that location in the code upon selecting the result.

Try these commands with =M-x=:

- =lsp-ivy-workspace-symbol= - Search for a symbol name in the current project workspace
- =lsp-ivy-global-workspace-symbol= - Search for a symbol name in all active project workspaces

#+begin_src emacs-lisp
  (use-package lsp-ivy
    :after lsp)

#+end_src
** Company-Mode
Currently gets called by lsp-mode by default. //my understanding//: company-mode provides the auto-complete box that lsp provides information to. 
#+begin_src emacs-lisp  
   (use-package company
     :delight company-mode 
     :custom
     (company-minimum-prefix-length 1)
     (company-idle-delay 0.0)
     :bind (:map lsp-mode-map ("<tab>" . company-indent-or-complete-common)))
#+end_src

*Company-box-mode* brings up a another box with information about the highlighted recommended item in the company/lsp box. 
#+begin_src emacs-lisp
   (use-package company-box
     :delight company-box-mode 
     :hook (company-mode . company-box-mode))
#+end_src

** Yasnippet
#+begin_src emacs-lisp
  (use-package yasnippet
    :delight( yas-minor-mode)
    :after lsp)

  (use-package yasnippet-snippets
    :after yas-minor-mode) ; load basic snippets from melpa
#+end_src

** Flycheck
Checks the code for bugs on the fly.
#+begin_src emacs-lisp
  (use-package flycheck
    :diminish flycheck-mode
    :after lsp)
#+end_src

** Dap Debugging
Like lsp-mode but for debuggers. 
#+begin_src emacs-lisp
  (use-package dap-mode
  :after lsp
  :delight dap-mode)
#+end_src

* C++
**  Hook
LSP-mode works with clangd (which currently is already loaded-- likely from irony mode (elpy dependency?). 
#+begin_src emacs-lisp   
  (setq-default c-basic-offset 4)

  (defun my-c-c++-mode-hook-fn ()
    (lsp)                ; turn on
    (smartparens-mode)   ; turn on
    (local-set-key (kbd "<tab>") #'company-indent-or-complete-common) ;tab comp
    (yas-minor-mode-on)  ; turn on
    (abbrev-mode -1)        ; turn off
    (delight 'c++-mode "C++" "C++//l") ; shorten modeline tag
    ;; edit the modeline-- not needed for doom-modeline  
    ;; (diminish 'flycheck-mode)
    ;; (diminish 'yas-minor-mode)
    ;; (diminish 'eldoc-mode)
    )
  (add-hook 'c-mode-hook #'my-c-c++-mode-hook-fn)
  (add-hook 'c++-mode-hook #'my-c-c++-mode-hook-fn)
#+end_src

#+RESULTS:
| my-c-c++-mode-hook-fn |

* Python
As of now, all we use is Elpy. Though, for more continuity with my C++-mode, I'd like replace it with  lsp-mode, dap, yasnippet, flycheck, etc. Video showing how to do this is [[https://www.youtube.com/watch?v=jPXIP46BnNA&t=1s][here]].
** Elpy
#+begin_src emacs-lisp   :tangle no
  (use-package elpy
    :init
    (elpy-enable)
    :custom
    (python-shell-interpreter "ipython")
    (python-shell-interpreter-args "-i --simple-prompt")
    (elpy-rpc-python-command "python3")
    (elpy-shell-echo-output nil)
      ;(elpy-rpc-backend "jedi")
      ;; Not sure if the following should really be here
      (python-shell-completion-native-enable nil)
      (python-indent-offset 4)
      (python-indent 4)
      )
#+end_src

** Hook
#+begin_src emacs-lisp  
  (defun my-python-mode-hook-fn ()
    (smartparens-mode)
    (local-set-key (kbd "<tab>") #'company-indent-or-complete-common))

  (add-hook 'python-mode-hook #'my-python-mode-hook-fn)
#+end_src

* Org-Mode
** Mode setup
#+begin_src emacs-lisp 
  (defun efs/org-mode-setup ()
    (org-indent-mode)
    (variable-pitch-mode 1)
    (visual-line-mode 1)
    (rainbow-delimiters-mode 1)
    (projectile-mode -1)
    ;; edit the modeline-- not needed for doom-modeline
    ;; (diminish 'visual-line-mode)
    ;; (diminish 'flyspell-mode)
    ;; (diminish 'org-indent-mode)
    ;; (diminish 'buffer-face-mode)
    ;; (diminish 'yas-minor-mode)
    ;; (diminish 'eldoc-mode)
    )
#+end_src

** Fonts 
#+begin_src emacs-lisp
  (defun efs/org-font-setup ()
    ;; Replace list hyphen with dot
    (font-lock-add-keywords 'org-mode
                       '(("^ *\\([-]\\) "
                        (0 (prog1 () (compose-region (match-beginning 1) (match-end 1) "•"))))))
    ;; Elipsis
     (setq org-ellipsis " ▾")
    ;; Set faces for heading levels
    (dolist (face '((org-level-1 . 1.2)
                    (org-level-2 . 1.1)
                    (org-level-3 . 1.05)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))

    ;; Ensure that anything that should be fixed-pitch in Org files appears that way
    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))
#+end_src

** Start
#+begin_src emacs-lisp
  (use-package org
    :commands (org-capture org-agenda)
    :hook (org-mode . efs/org-mode-setup)
    :config
    (efs/org-font-setup)
    (setq org-image-actual-width nil) ; fix to allow picture resizing
  )  
#+end_src

** Bullets
#+begin_src emacs-lisp 
  (use-package org-bullets
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("◉" "○" "●" "○" "●" "○" "●")))
#+end_src

** Center column
#+begin_src emacs-lisp 
(defun efs/org-mode-visual-fill ()
  (setq visual-fill-column-width 100
        visual-fill-column-center-text t)
  (visual-fill-column-mode 1))

(use-package visual-fill-column
  :hook (org-mode . efs/org-mode-visual-fill))

#+end_src

** Block Templates
#+begin_src emacs-lisp  
(with-eval-after-load 'org
  ;; This is needed as of Org 9.2
  (require 'org-tempo)
  (add-to-list 'org-structure-template-alist '("sh" . "src sh"))
  (add-to-list 'org-structure-template-alist '("el" . "src emacs-lisp"))
  (add-to-list 'org-structure-template-alist '("py" . "src python"))
)
#+end_src

* Terminals
** term-mode
- Slower than vterm at printing large amounts of information. 
- For more than one terminal, you must M-x rename-uniquely the terminal.
- C-c prefix for term commands

Line-mode vs char-mode *selection shows on the modeline*:
C-c C-k -> char-mode
C-c C-j  -> line-mode
*** Better term-mode colors
#+begin_src emacs-lisp
(use-package eterm-256color
  :hook (term-mode . eterm-256color-mode))
#+end_src

** vterm
Faster terminal due to being compiled. Default is a better mode than term-mode; it's like a char-mode but with ability to access function list with M-x.  [[https://github.com/akermu/emacs-libvterm][vterm Documentation]]
- For more than one terminal, you must M-x rename-uniquely the terminal.
- C-c prefix for term commands
- C-c C-c = send C-c to the terminal (kill running command)

#+begin_src emacs-lisp
  (use-package vterm
    :commands vterm
    :bind (:map vterm-mode-map ("C-o" . other-window))
    :config
    ;(setq term-prompt-regexp "^[^$]*[$] *");; match your custom shell
  ;;(setq vterm-shell "zsh");; Set this to customize the shell to launch
    (setq vterm-max-scrollback 10000))
#+end_src

#+RESULTS:
: 10000

   
** shell-mode
Between term-mode eshell.

** eshell
More customization in Elisp. Supports Tramp. 
* File Management
** TODO Dired
More to do at [[https://youtu.be/PMWwM8QJAtU][here]].  Could not use "use-package" since dired packaged did not exist. Here we just modify dired without "use-package".
- "(" toggle file info
- M-x du  shows the size of the files in the buffer (toggle for human readable)
#+begin_src emacs-lisp
    (setq dired-listing-switches "-agho --group-directories-first"); organized info

    (use-package treemacs-icons-dired
      :config (treemacs-icons-dired-mode) )
  ;A rather janky mode which lists the recursive size of each foler/item in dired. 
    (use-package dired-du
    :commands du)
#+end_src



* Localwords
#  LocalWords:  IDE solarized gruvbox vertico Magit Quickhelp Elpy Elisp Neotree Greduan's Localwords Esc  Smartparens UI Helpful's Yasnippet LSP Modeline Dap Flycheck modeline Treemacs backend lsp vterm eshell  Dired dracula clangd ui
